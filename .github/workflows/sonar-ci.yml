name: Sonar reporting combining app and api

on:
  push:
    branches: [main, development]
    paths:
      - 'cf-graphdb-app/**'
      - 'cf-graphdb-api/**'
      - '!**.md'
  pull_request:
    branches: [main, development]
    paths:
      - 'cf-graphdb-api/**'
      - 'cf-graphdb-app/**'
      - '!**.md'
  workflow_dispatch:

jobs:
  build-app:
    name: Build & Test App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cf-graphdb-app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'cf-graphdb-app/package-lock.json'

      - name: ðŸ§ª Run Vitest with temp .env
        shell: bash
        run: |
          set -e          # fail on first error in main command block
          trap 'rm -f .dev.vars.stage' EXIT  # always delete .dev.vars.stage on exit
          echo "JWT_SECRET=${{ secrets.ENV_JWT_SECRET }}" > .dev.vars.stage
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> .dev.vars.stage
          echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> .dev.vars.stage
          echo "QDRANT_EDGE_COLLECTION=${{ secrets.QDRANT_EDGE_COLLECTION }}" >> .dev.vars.stage
          echo "QDRANT_URL=${{ secrets.QDRANT_URL }}" >> .dev.vars.stage
          echo "OIDC_CLIENT_SECRET=${{ secrets.OIDC_CLIENT_SECRET }}" >> .dev.vars.stage
          echo "OIDC_CLIENT_ID=${{ secrets.OIDC_CLIENT_ID }}" >> .dev.vars.stage
          echo "OIDC_DISCOVERY_URL=${{ secrets.OIDC_DISCOVERY_URL }}" >> .dev.vars.stage
          echo "KEYCLOAK_TEST_PASS=${{ secrets.KEYCLOAK_TEST_PASS }}" >> .dev.vars.stage
          echo "KEYCLOAK_TEST_USER=${{ secrets.KEYCLOAK_TEST_USER }}" >> .dev.vars.stage
          npm run ci:stage
        env:
          NODE_ENV: stage

      - name: Upload App Coverage
        uses: actions/upload-artifact@v4
        with:
          name: app-coverage
          path: cf-graphdb-app/coverage/lcov.info

  build-api:
    name: Build & Test API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cf-graphdb-api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'cf-graphdb-api/package-lock.json'

      - name: ðŸ§ª Test & Generate Coverage
        shell: bash
        run: |
          set -e
          trap 'rm -f .dev.vars.stage' EXIT
          echo "JWT_SECRET=${{ secrets.ENV_JWT_SECRET }}" > .dev.vars.stage
          echo "TOGETHER_API_KEY=${{ secrets.TOGETHER_API_KEY }}" >> .dev.vars.stage
          echo "QDRANT_API_KEY=${{ secrets.QDRANT_API_KEY }}" >> .dev.vars.stage
          echo "QDRANT_EDGE_COLLECTION=${{ secrets.QDRANT_EDGE_COLLECTION }}" >> .dev.vars.stage
          echo "QDRANT_URL=${{ secrets.QDRANT_URL }}" >> .dev.vars.stage
          echo "OIDC_CLIENT_SECRET=${{ secrets.OIDC_CLIENT_SECRET }}" >> .dev.vars.stage
          echo "OIDC_CLIENT_ID=${{ secrets.OIDC_CLIENT_ID }}" >> .dev.vars.stage
          echo "OIDC_DISCOVERY_URL=${{ secrets.OIDC_DISCOVERY_URL }}" >> .dev.vars.stage
          echo "KEYCLOAK_TEST_PASS=${{ secrets.KEYCLOAK_TEST_PASS }}" >> .dev.vars.stage
          echo "KEYCLOAK_TEST_USER=${{ secrets.KEYCLOAK_TEST_USER }}" >> .dev.vars.stage
          npm install
          npm run ci:stage
        env:
          NODE_ENV: stage

      - name: Upload API Coverage
        uses: actions/upload-artifact@v4
        with:
          name: api-coverage
          path: cf-graphdb-api/coverage/lcov.info

  sonar:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: [build-app, build-api]
    steps:
      - uses: actions/checkout@v4

      - name: Download App Coverage
        uses: actions/download-artifact@v4
        with:
          name: app-coverage
          path: cf-graphdb-app/coverage

      - name: Download API Coverage
        uses: actions/download-artifact@v4
        with:
          name: api-coverage
          path: cf-graphdb-api/coverage

      - name: Run Sonar Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.sources=cf-graphdb-api/src,cf-graphdb-app/src
            -Dsonar.tests=cf-graphdb-api/test,cf-graphdb-app/test
            -Dsonar.test.inclusions=**/*.test.ts
            -Dsonar.javascript.lcov.reportPaths=cf-graphdb-api/coverage/lcov.info,cf-graphdb-app/coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.ts
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
